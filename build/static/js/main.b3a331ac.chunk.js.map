{"version":3,"sources":["serviceWorker.ts","utils/subscriptionClient.ts","contexts/UserContext.tsx","routes/AuthenticatedRoute.tsx","containers/Register/Register.styles.ts","graphql/mutations/LOGIN.ts","graphql/mutations/REGISTER.ts","graphql/mutations/SEND_MESSAGE.ts","graphql/mutations/INIT_CONVERSATION.ts","graphql/mutations/TOGGLE_STAR.ts","types/enums/ColorEnum.ts","containers/Register/Register.tsx","containers/Login/Login.styles.ts","containers/Login/Login.tsx","containers/CreateGroupModal/CreateGroupModal.tsx","utils/constructGroupName.ts","containers/ChatList/ChatList.styles.ts","graphql/mutations/INIT_CHANNEL.ts","containers/CreateChannelModal/CreateChannelModal.tsx","graphql/queries/GET_USERS.ts","graphql/queries/GET_PRIVATE_MESSAGES.ts","graphql/queries/SEARCH.ts","containers/SearchModal/SearchModal.styles.ts","containers/SearchModal/SearchModal.tsx","containers/ChatList/ChatList.tsx","containers/ActiveChat/ActiveChat.styles.ts","graphql/queries/GET_CONVERSATION_MESSAGES.ts","graphql/queries/GET_REPLIES.ts","utils/getQueryByType.ts","graphql/mutations/LEAVE_CONVERSATION.ts","graphql/mutations/ADD_MEMBERS.ts","containers/AddMembersModal/AddMembersModal.tsx","components/Message/Message.styles.ts","contexts/Sidebar/Context.ts","contexts/Sidebar/UpdateContext.ts","contexts/Sidebar/Provider.tsx","components/MessageInput/MessageInput.styles.ts","components/MessageInput/Toolbar/Toolbar.styles.ts","components/ImageUploadModal/UploadInput/UploadInput.styles.ts","components/ImageUploadModal/UploadInput/UploadInput.tsx","components/ImageUploadModal/ImageUploadModal.tsx","components/MessageInput/Toolbar/Toolbar.tsx","components/MessageInput/MessageInput.tsx","graphql/mutations/DELETE_MESSAGE.ts","graphql/mutations/TOGGLE_PIN.ts","components/Message/Message.tsx","containers/MessagesList/MessagesList.styles.ts","containers/MessagesList/MessagesList.tsx","containers/LeaveConfirmModal/LeaveConfirmModal.tsx","containers/ActiveChat/ActiveChat.tsx","graphql/subscriptions/MESSAGES_SUBSCRIPTION.ts","containers/Sidebar/Sidebar.styles.ts","graphql/mutations/SEND_REPLY.ts","containers/Sidebar/Sidebar.tsx","containers/Main/Main.styles.ts","containers/Main/Main.tsx","utils/readQuery.ts","routes/Routes.tsx","index.tsx"],"names":["isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","subscriptionClient","SubscriptionClient","reconnect","lazy","connectionParams","user","localStorage","getItem","JSON","parse","authorization","token","UserContext","createContext","onLogout","onLogin","loading","UserProvider","children","useState","setUser","setLoading","useEffect","currentUser","value","unsubscribeAll","close","removeItem","newUser","setItem","stringify","Provider","AuthenticatedRoute","props","useContext","Loader","vertical","center","content","to","useStyles","createUseStyles","container","maxWidth","margin","marginTop","LOGIN","gql","REGISTER","SEND_MESSAGE","INIT_CONVERSATION","ColorEnum","TOGGLE_STAR","Register","errors","setErrors","email","password","displayName","form","setForm","classes","history","useHistory","useMutation","onCompleted","push","onError","graphQLErrors","onChange","key","Container","className","Content","FlexboxGrid","justify","Item","componentClass","Col","xs","Panel","header","bordered","Form","fluid","FormGroup","map","index","showIcon","type","description","message","FormControl","name","placeholder","ButtonToolbar","Button","appearance","onClick","variables","data","Login","login","React","memo","open","handleClose","users","refetch","selectedUsers","setSelectedUsers","initConversation","handleSubmit","useCallback","a","members","handleOnChange","label","id","Modal","show","onHide","Header","Title","Body","CheckPicker","style","width","Footer","disabled","truncate","input","length","substring","constructGroupName","trunc","m","join","height","borderRight","borderRightStyle","borderRightColor","LighterGrey","paddingLeft","paddingRight","fontSize","display","justifyContent","alignItems","borderBottom","borderBottomStyle","borderBottomColor","marginBottom","INIT_CHANNEL","nextForm","Input","GET_USERS","GET_PRIVATE_MESSAGES","SEARCH","panelStyles","padding","color","noResults","SearchModal","searchValue","setSearchValue","useQuery","skip","by","handleChatClick","object","renderList","useMemo","search","Dropdown","Menu","background","panel","eventKey","onSelect","divider","conversations","conversation","channels","channel","iconStyle","cursor","marginLeft","showGroupModal","setShowGroupModal","showChannelModal","setShowChannelModal","showSearchModal","setShowSearchModal","toggleGroupModal","toggleSearchModal","toggleChannelModal","Sidenav","Icon","icon","filter","c","starred","LightGrey","White","overflow","footer","border","yellow","pointer","GET_CONVERSATION_MESSAGES","GET_REPLIES","getQueryByType","query","LEAVE_CONVERSATION","ADD_MEMBERS","addMembers","bold","fontWeight","avatar","noBorderBottomRadius","borderBottomLeftRadius","borderBottomRightRadius","withBorderBottomRadius","replyWrapper","BackgroundGrey","borderTopWidth","borderTopColor","BorderGrey","borderTopStyle","repliesCount","Blue","textDecoration","messageWrapper","borderTopLeftRadius","borderTopRightRadius","flex","alignCenter","date","moreIconBtn","Grey","borderRadius","backgroundColor","image","thumbTack","marginRight","pinned","notPinned","SidebarContext","isOpen","selectedThread","SidebarUpdateContext","selectThread","SidebarProvider","setIsOpen","setSelectedThread","updateValue","inputWrapper","borderBottomWidth","blueIcon","grey","emojiSelect","bottom","wrapper","textWrapper","lineHeight","UploadInput","selectedFile","handleChange","Uploader","autoUpload","multiple","listType","accept","draggable","ImageUploadModal","setSelectedFile","handleFileSelect","fileList","blobFile","handleUpload","Toolbar","showImageModal","setShowImageModal","handleAttachmentClick","attachmentIcon","handleModalClose","IconButton","positionSuggestions","settings","popoverLeft","decoratorRect","left","windowWidth","innerWidth","top","transform","transformOrigin","transition","MessageInput","readOnly","html","isEditing","handleCancelEdit","mentions","suggestions","setSuggestions","EditorState","createWithContent","convertFromRaw","createEmpty","editorState","setEditorState","handleStateChange","handleMessageEnter","getCurrentContent","hasText","raw","convertToRaw","clearEditorContent","Emoji","emojiPlugin","createEmojiPlugin","EmojiSuggestions","handleMentionClick","find","mentionComponent","mentionProps","Object","assign","mention","Mentions","mentionPlugin","createMentionPlugin","MentionSuggestions","hashtag","hashtagDecoratorComponentEx","hashtagDecoratorComponent","newProps","decoratedText","HashTag","hashTagPlugin","createHashtagPlugin","component","decorators","onSearchChange","defaultSuggestionsFilter","handleCancel","allowEdit","clsx","plugins","onAddMention","size","DELETE_MSG","TOGGLE_PIN","Message","isThreadMessage","setIsEditing","isDropdownOpen","setIsDropdownOpen","useRouteMatch","sender","updatedAt","avatarBackground","uniqolor","avatarColor","isLight","Black","Date","toLocaleString","update","cache","deleteMessage","messages","readQuery","params","writeQuery","deleteMessageMutation","togglePinned","togglePinMutation","handlePinClick","sendMessage","sendMessageMutation","targetId","handleToggle","handleReplySelect","handleDelete","handleEdit","renderTitle","showReplyCount","replyCount","isSender","Avatar","placement","onToggle","src","imageUrl","info","textAlign","isThread","handleConfirm","activeChat","activeChatType","showAddMembers","setShowAddMembers","showLeaveConfirmModal","setShowLeaveConfirmModal","contentRef","useRef","activeUser","activeConversation","concat","leaveConversation","toggleStar","scrollToBottom","current","scrollTo","scrollHeight","toggleAddMembersModal","handleLeaveClose","handleLeaveClick","handleLeaveConversation","handleLeaveConfirm","renderLeaveButton","renderAddMembers","renderName","handleStarClick","renderStar","ref","MESSAGES_SUBSCRIPTION","borderLeft","borderLeftStyle","borderColor","WebkitTransition","MozTransition","OTransition","closed","SEND_REPLY","sendReply","sendReplyMutation","parentId","stateClass","Divider","Main","setActiveChat","setActiveChatType","subscription","useSubscription","client","useApolloClient","subscribe","payload","event","chatId","options","ApolloConsumer","Routes","basename","path","exact","wsLink","WebSocketLink","uploadLink","createUploadLink","uri","splitLink","split","definition","getMainDefinition","kind","operation","authMiddleware","ApolloLink","forward","setContext","headers","ApolloClient","InMemoryCache","link","App","ApolloProvider","ReactDOM","render","document","getElementById","URL","process","href","origin","addEventListener","fetch","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.b3a331ac.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { SubscriptionClient } from \"subscriptions-transport-ws\";\nimport { IUser } from \"../types/interfaces\";\n\nexport const subscriptionClient = new SubscriptionClient(\n    \"ws://dc-itc.el.vgtu.lt:22080/stud-18-backend/graphql\",\n    {\n        reconnect: true,\n        lazy: true,\n        connectionParams: () => {\n            let user: string | IUser | null = localStorage.getItem(\n                \"current-user\"\n            );\n            if (user) {\n                user = JSON.parse(user) as IUser;\n                console.log(\"connected\");\n                return {\n                    authorization: user.token,\n                };\n            }\n            return null;\n        },\n    }\n);\n\nexport const disconnectSocket = () => {\n    console.log(\"remove connection\");\n    subscriptionClient.unsubscribeAll();\n    subscriptionClient.close(true);\n};\n","import React, { createContext, useEffect, useState } from \"react\";\nimport { IUser } from \"../types/interfaces\";\nimport { disconnectSocket } from \"../utils/subscriptionClient\";\n\ninterface IUserContext {\n    user: IUser | null;\n    onLogout: () => void;\n    onLogin: (newUser: IUser) => void;\n    loading: boolean;\n}\n\nexport const UserContext = createContext<IUserContext>({\n    user: null,\n    onLogout: () => {},\n    onLogin: () => {},\n    loading: true,\n});\n\nexport const UserProvider: React.FC = ({ children }) => {\n    const [user, setUser] = useState<IUser | null>(null);\n    const [loading, setLoading] = useState(true);\n\n    useEffect(() => {\n        const currentUser = localStorage.getItem(\"current-user\");\n        if (currentUser) {\n            setUser(JSON.parse(currentUser));\n        }\n        setLoading(false);\n    }, []);\n\n    const onLogout = () => {\n        disconnectSocket();\n        localStorage.removeItem(\"current-user\");\n        setUser(null);\n        setLoading(false);\n    };\n\n    const onLogin = (newUser: IUser) => {\n        localStorage.setItem(\"current-user\", JSON.stringify(newUser));\n        setUser(newUser);\n        setLoading(false);\n    };\n\n    const value = { user, onLogout, onLogin, loading };\n    return (\n        <UserContext.Provider value={value}>{children}</UserContext.Provider>\n    );\n};\n","import React, { useContext } from \"react\";\nimport { Redirect, RouteProps, Route } from \"react-router-dom\";\nimport { Loader } from \"rsuite\";\nimport { UserContext } from \"../contexts/UserContext\";\n\nexport const AuthenticatedRoute = (props: RouteProps) => {\n    const { user, loading } = useContext(UserContext);\n\n    if (loading) {\n        return <Loader vertical center content=\"loading\" />;\n    }\n\n    return user ? <Route {...props} /> : <Redirect to=\"/login\" />;\n};\n","import { createUseStyles } from \"react-jss\";\n\nexport const useStyles = createUseStyles({\n    container: {\n        maxWidth: 500,\n        margin: \"0 auto\",\n        marginTop: 100\n    }\n});\n","import { gql } from \"@apollo/client\";\n\nexport const LOGIN = gql`\n    mutation login($data: LoginInput!) {\n        login(data: $data) {\n            user {\n                id\n                email\n                displayName\n                phoneNumber\n                description\n                imageUrl\n            }\n            token\n        }\n    }\n`;\n","import { gql } from \"@apollo/client\";\n\nexport const REGISTER = gql`\n    mutation register($data: RegisterInput!) {\n        register(data: $data) {\n            user {\n                id\n                email\n                displayName\n                phoneNumber\n                description\n                imageUrl\n            }\n            token\n        }\n    }\n`;\n","import { gql } from \"@apollo/client\";\n\nexport const SEND_MESSAGE = gql`\n    mutation sendMessage($data: MessageInput!, $image: Upload) {\n        sendMessage(data: $data, image: $image) {\n            id\n            sender {\n                id\n                email\n                displayName\n                phoneNumber\n                description\n                imageUrl\n            }\n            content\n            createdAt\n            updatedAt\n            replyCount\n            imageUrl\n            type\n            pinned\n        }\n    }\n`;\n","import { gql } from \"@apollo/client\";\n\nexport const INIT_CONVERSATION = gql`\n    mutation initConversation($members: [String!]!) {\n        initConversation(members: $members) {\n            id\n            type\n            starred\n            createdAt\n            members {\n                id\n                email\n                displayName\n                phoneNumber\n                description\n                imageUrl\n            }\n        }\n    }\n`;\n","import { gql } from \"@apollo/client\";\n\nexport const TOGGLE_STAR = gql`\n    mutation toggleStar($id: String!) {\n        toggleStar(id: $id) {\n            id\n            type\n            starred\n            createdAt\n            members {\n                id\n                email\n                displayName\n                phoneNumber\n                description\n                imageUrl\n            }\n        }\n    }\n`;\n","export enum ColorEnum {\n    Black = \"#000000\",\n    White = \"#FFFFFF\",\n    LightGrey = \"#F5F5F5\",\n    LighterGrey = \"#EDEDED\",\n    BorderGrey = \"#F0F0F0\",\n    BackgroundGrey = \"#FBFBFB\",\n    Grey = \"#575757\",\n    Blue = \"#3498FF\",\n}\n","import React, { useState } from \"react\";\nimport {\n    Container,\n    Content,\n    FlexboxGrid,\n    Panel,\n    Form,\n    FormGroup,\n    FormControl,\n    ButtonToolbar,\n    Button,\n    Col,\n    Message,\n} from \"rsuite\";\nimport { useStyles } from \"./Register.styles\";\nimport { useHistory } from \"react-router-dom\";\nimport { useMutation } from \"@apollo/client\";\nimport { GraphQLError } from \"graphql\";\nimport { REGISTER } from \"../../graphql/mutations\";\n\nconst Register: React.FC = () => {\n    const [errors, setErrors] = useState<readonly GraphQLError[]>([]);\n    const [form, setForm] = useState({\n        email: \"\",\n        password: \"\",\n        displayName: \"\",\n    });\n    const classes = useStyles();\n    const history = useHistory();\n    const [register, { loading }] = useMutation(REGISTER, {\n        onCompleted() {\n            history.push(\"/login\");\n        },\n        onError({ graphQLErrors }) {\n            setErrors(graphQLErrors);\n        },\n    });\n\n    function onChange(key: string) {\n        return function (value: string) {\n            setForm({ ...form, [key]: value });\n        };\n    }\n\n    function handleRegister() {\n        setErrors([]);\n        register({ variables: { data: form } });\n    }\n\n    function redirectToLogin() {\n        history.push(\"/login\");\n    }\n\n    return (\n        <Container className={classes.container}>\n            <Content>\n                <FlexboxGrid justify=\"center\">\n                    <FlexboxGrid.Item componentClass={Col} xs={24}>\n                        <Panel header={<h3>Register</h3>} bordered>\n                            <Form fluid>\n                                <FormGroup>\n                                    {errors.map((error, index) => (\n                                        <Message\n                                            key={`error-${index}`}\n                                            showIcon\n                                            type=\"error\"\n                                            description={error.message}\n                                        />\n                                    ))}\n                                </FormGroup>\n                                <FormGroup>\n                                    <FormControl\n                                        name=\"name\"\n                                        placeholder=\"Display name\"\n                                        onChange={onChange(\"displayName\")}\n                                        value={form.displayName}\n                                    />\n                                </FormGroup>\n                                <FormGroup>\n                                    <FormControl\n                                        name=\"email\"\n                                        placeholder=\"Email address\"\n                                        onChange={onChange(\"email\")}\n                                        value={form.email}\n                                    />\n                                </FormGroup>\n                                <FormGroup>\n                                    <FormControl\n                                        name=\"password\"\n                                        type=\"password\"\n                                        placeholder=\"Password\"\n                                        onChange={onChange(\"password\")}\n                                        value={form.password}\n                                    />\n                                </FormGroup>\n                                <FormGroup>\n                                    <ButtonToolbar>\n                                        <Button\n                                            appearance=\"primary\"\n                                            loading={loading}\n                                            onClick={handleRegister}\n                                        >\n                                            Register\n                                        </Button>\n                                        <Button\n                                            appearance=\"link\"\n                                            onClick={redirectToLogin}\n                                        >\n                                            Sign in\n                                        </Button>\n                                    </ButtonToolbar>\n                                </FormGroup>\n                            </Form>\n                        </Panel>\n                    </FlexboxGrid.Item>\n                </FlexboxGrid>\n            </Content>\n        </Container>\n    );\n};\n\nexport default Register;\n","import { createUseStyles } from \"react-jss\";\n\nexport const useStyles = createUseStyles({\n    container: {\n        maxWidth: 500,\n        margin: \"0 auto\",\n        marginTop: 100\n    }\n});\n","import React, { useContext, useState } from \"react\";\nimport {\n    Container,\n    Content,\n    FlexboxGrid,\n    Panel,\n    Form,\n    FormGroup,\n    FormControl,\n    ButtonToolbar,\n    Button,\n    Col,\n    Message,\n} from \"rsuite\";\nimport { useStyles } from \"./Login.styles\";\nimport { useHistory } from \"react-router-dom\";\nimport { useMutation } from \"@apollo/client\";\nimport { GraphQLError } from \"graphql\";\nimport { LOGIN } from \"../../graphql/mutations\";\nimport { UserContext } from \"../../contexts/UserContext\";\n\nconst Login: React.FC = () => {\n    const [errors, setErrors] = useState<readonly GraphQLError[]>([]);\n    const [form, setForm] = useState({\n        email: \"\",\n        password: \"\",\n    });\n    const classes = useStyles();\n    const history = useHistory();\n    const { onLogin } = useContext(UserContext);\n    const [login, { loading }] = useMutation(LOGIN, {\n        onCompleted({ login }) {\n            onLogin({\n                ...login.user,\n                token: login.token,\n            });\n            history.push(\"/\");\n        },\n        onError({ graphQLErrors }) {\n            setErrors(graphQLErrors);\n        },\n    });\n\n    function onChange(key: string) {\n        return function (value: string) {\n            setForm({ ...form, [key]: value });\n        };\n    }\n\n    function handleLogin() {\n        setErrors([]);\n        login({ variables: { data: form } });\n    }\n\n    function redirectToRegister() {\n        history.push(\"/register\");\n    }\n\n    return (\n        <Container className={classes.container}>\n            <Content>\n                <FlexboxGrid justify=\"center\">\n                    <FlexboxGrid.Item componentClass={Col} xs={24}>\n                        <Panel header={<h3>Login</h3>} bordered>\n                            <Form fluid>\n                                <FormGroup>\n                                    {errors.map((error, index) => (\n                                        <Message\n                                            key={`error-${index}`}\n                                            showIcon\n                                            type=\"error\"\n                                            description={error.message}\n                                        />\n                                    ))}\n                                </FormGroup>\n                                <FormGroup>\n                                    <FormControl\n                                        name=\"email\"\n                                        placeholder=\"Email address\"\n                                        onChange={onChange(\"email\")}\n                                        value={form.email}\n                                    />\n                                </FormGroup>\n                                <FormGroup>\n                                    <FormControl\n                                        name=\"password\"\n                                        type=\"password\"\n                                        placeholder=\"Password\"\n                                        onChange={onChange(\"password\")}\n                                        value={form.password}\n                                    />\n                                </FormGroup>\n                                <FormGroup>\n                                    <ButtonToolbar>\n                                        <Button\n                                            appearance=\"primary\"\n                                            loading={loading}\n                                            onClick={handleLogin}\n                                        >\n                                            Sign in\n                                        </Button>\n                                        <Button\n                                            appearance=\"link\"\n                                            onClick={redirectToRegister}\n                                        >\n                                            Register\n                                        </Button>\n                                    </ButtonToolbar>\n                                </FormGroup>\n                            </Form>\n                        </Panel>\n                    </FlexboxGrid.Item>\n                </FlexboxGrid>\n            </Content>\n        </Container>\n    );\n};\n\nexport default Login;\n","import React, { useCallback, useState } from \"react\";\nimport { Button, CheckPicker, Message, Modal } from \"rsuite\";\nimport { useMutation } from \"@apollo/client\";\nimport { INIT_CONVERSATION } from \"../../graphql/mutations\";\nimport { GraphQLError } from \"graphql\";\n\ninterface IProps {\n    open: boolean;\n    handleClose: () => void;\n    refetch: () => void;\n    users: any;\n}\n\nconst CreateGroupModal: React.FC<IProps> = ({\n    open,\n    handleClose,\n    users,\n    refetch,\n}) => {\n    const [errors, setErrors] = useState<readonly GraphQLError[]>([]);\n    const [selectedUsers, setSelectedUsers] = useState<string[]>([]);\n    const [initConversation, { loading }] = useMutation(INIT_CONVERSATION, {\n        onCompleted() {\n            refetch();\n            handleClose();\n        },\n        onError({ graphQLErrors }) {\n            setErrors(graphQLErrors);\n        },\n    });\n\n    const handleSubmit = useCallback(async () => {\n        await initConversation({ variables: { members: selectedUsers } });\n    }, [selectedUsers, initConversation]);\n\n    const handleOnChange = useCallback((value: any) => {\n        setSelectedUsers(value);\n    }, []);\n\n    const data = users.map((user: any) => ({\n        label: user.displayName,\n        value: user.id,\n    }));\n\n    return (\n        <Modal show={open} onHide={handleClose}>\n            <Modal.Header>\n                <Modal.Title>Create a new group</Modal.Title>\n            </Modal.Header>\n            <Modal.Body>\n                {errors.map((error, index) => (\n                    <Message\n                        key={`error-${index}`}\n                        showIcon\n                        type=\"error\"\n                        description={error.message}\n                    />\n                ))}\n                <CheckPicker\n                    placeholder=\"Add users to group\"\n                    data={data}\n                    onChange={handleOnChange}\n                    value={selectedUsers}\n                    style={{ marginTop: 10, width: \"100%\" }}\n                />\n            </Modal.Body>\n            <Modal.Footer>\n                <Button\n                    onClick={handleSubmit}\n                    disabled={loading}\n                    appearance=\"primary\"\n                >\n                    Ok\n                </Button>\n                <Button\n                    onClick={handleClose}\n                    disabled={loading}\n                    appearance=\"subtle\"\n                >\n                    Cancel\n                </Button>\n            </Modal.Footer>\n        </Modal>\n    );\n};\n\nexport default React.memo(CreateGroupModal);\n","import { IUser } from \"../types/interfaces\";\n\nconst truncate = (input: string, length: number = 25) => {\n    if (input.length > length) {\n        return input.substring(0, length) + \"...\";\n    } else {\n        return input;\n    }\n};\n\nexport const constructGroupName = (\n    members: IUser[],\n    trunc: boolean = false\n) => {\n    const name = members.map((m) => m.displayName).join(\", \");\n    return trunc ? truncate(name) : name;\n};\n","import { createUseStyles } from \"react-jss\";\nimport { ColorEnum } from \"../../types/enums/ColorEnum\";\n\nexport const useStyles = createUseStyles({\n    container: {\n        height: \"100%\",\n        borderRight: 1,\n        borderRightStyle: \"solid\",\n        borderRightColor: ColorEnum.LighterGrey,\n    },\n    header: {\n        paddingLeft: 20,\n        paddingRight: 20,\n        fontSize: 16,\n        height: 60,\n        display: \"flex\",\n        justifyContent: \"space-between\",\n        alignItems: \"center\",\n        borderBottom: 1,\n        borderBottomStyle: \"solid\",\n        borderBottomColor: ColorEnum.LighterGrey,\n        marginBottom: 10,\n    },\n});\n","import { gql } from \"@apollo/client\";\n\nexport const INIT_CHANNEL = gql`\n    mutation initChannel($members: [String!]!, $name: String!) {\n        initChannel(members: $members, name: $name, isPrivate: false) {\n            id\n            type\n            starred\n            createdAt\n            members {\n                id\n                email\n                displayName\n                phoneNumber\n                description\n                imageUrl\n            }\n            name\n            isPrivate\n        }\n    }\n`;\n","import React, { useCallback, useState } from \"react\";\nimport { Button, CheckPicker, Input, Message, Modal } from \"rsuite\";\nimport { useMutation } from \"@apollo/client\";\nimport { INIT_CHANNEL } from \"../../graphql/mutations/INIT_CHANNEL\";\nimport { GraphQLError } from \"graphql\";\n\ninterface IProps {\n    open: boolean;\n    handleClose: () => void;\n    refetch: () => void;\n    users: any;\n}\n\nconst CreateChannelModal: React.FC<IProps> = ({\n    open,\n    handleClose,\n    users,\n    refetch,\n}) => {\n    const [errors, setErrors] = useState<readonly GraphQLError[]>([]);\n    const [form, setForm] = useState({\n        name: \"\",\n        members: [],\n    });\n    const [initConversation, { loading }] = useMutation(INIT_CHANNEL, {\n        onCompleted() {\n            refetch();\n            handleClose();\n        },\n        onError({ graphQLErrors }) {\n            setErrors(graphQLErrors);\n        },\n    });\n\n    const handleSubmit = useCallback(async () => {\n        await initConversation({\n            variables: { members: form.members, name: form.name },\n        });\n    }, [form.members, form.name, initConversation]);\n\n    const handleOnChange = useCallback(\n        (key: string) => (value: any) => {\n            const nextForm = {\n                ...form,\n                [key]: value,\n            };\n            console.log(nextForm);\n            setForm(nextForm);\n        },\n        [form, setForm]\n    );\n\n    const data = users.map((user: any) => ({\n        label: user.displayName,\n        value: user.id,\n    }));\n\n    return (\n        <Modal show={open} onHide={handleClose}>\n            <Modal.Header>\n                <Modal.Title>Create a new group</Modal.Title>\n            </Modal.Header>\n            <Modal.Body>\n                {errors.map((error, index) => (\n                    <Message\n                        key={`error-${index}`}\n                        showIcon\n                        type=\"error\"\n                        description={error.message}\n                    />\n                ))}\n                <Input\n                    onChange={handleOnChange(\"name\")}\n                    value={form?.name}\n                    placeholder=\"Channel name\"\n                    style={{ marginBottom: 10, marginTop: 10 }}\n                />\n                <CheckPicker\n                    placeholder=\"Add users to channel\"\n                    data={data}\n                    onChange={handleOnChange(\"members\")}\n                    value={form.members}\n                    style={{ width: \"100%\" }}\n                />\n            </Modal.Body>\n            <Modal.Footer>\n                <Button\n                    onClick={handleSubmit}\n                    loading={loading}\n                    appearance=\"primary\"\n                >\n                    Ok\n                </Button>\n                <Button\n                    onClick={handleClose}\n                    disabled={loading}\n                    appearance=\"subtle\"\n                >\n                    Cancel\n                </Button>\n            </Modal.Footer>\n        </Modal>\n    );\n};\n\nexport default React.memo(CreateChannelModal);\n","import { gql } from \"@apollo/client\";\n\nexport const GET_USERS = gql`\n    query getUsers {\n        users: getUsers {\n            id\n            email\n            displayName\n            phoneNumber\n            description\n            imageUrl\n        }\n        conversations: getConversations {\n            id\n            type\n            starred\n            createdAt\n            members {\n                id\n                email\n                displayName\n                phoneNumber\n                description\n                imageUrl\n            }\n        }\n        channels: getChannels {\n            id\n            type\n            starred\n            createdAt\n            members {\n                id\n                email\n                displayName\n                phoneNumber\n                description\n                imageUrl\n            }\n            name\n            isPrivate\n        }\n    }\n`;\n","import { gql } from \"@apollo/client\";\n\nexport const GET_PRIVATE_MESSAGES = gql`\n    query messages($id: String!) {\n        messages(userId: $id) {\n            id\n            sender {\n                id\n                email\n                displayName\n                phoneNumber\n                description\n                imageUrl\n            }\n            content\n            createdAt\n            updatedAt\n            replyCount\n            imageUrl\n            type\n            pinned\n        }\n    }\n`;\n","import { gql } from \"@apollo/client\";\n\nexport const SEARCH = gql`\n    query search($by: String!) {\n        search(by: $by) {\n            users {\n                id\n                email\n                displayName\n                phoneNumber\n                description\n                imageUrl\n            }\n            channels {\n                id\n                type\n                starred\n                createdAt\n                members {\n                    id\n                    email\n                    displayName\n                    phoneNumber\n                    description\n                    imageUrl\n                }\n                name\n                isPrivate\n            }\n            conversations {\n                id\n                type\n                starred\n                createdAt\n                members {\n                    id\n                    email\n                    displayName\n                    phoneNumber\n                    description\n                    imageUrl\n                }\n            }\n        }\n    }\n`;\n","import { createUseStyles } from \"react-jss\";\n\nexport const useStyles = createUseStyles({\n    panelStyles: {\n        padding: \"4px 0px\",\n        color: \"#aaa\",\n    },\n    input: {\n        marginBottom: 15,\n    },\n    noResults: {\n        padding: \"10px 0\",\n    },\n});\n","import React, { useCallback, useMemo, useState } from \"react\";\nimport { Button, Dropdown, Input, Loader, Modal } from \"rsuite\";\nimport { useQuery } from \"@apollo/client\";\nimport { SEARCH } from \"../../graphql/queries\";\nimport { IUser } from \"../../types/interfaces\";\nimport { useStyles } from \"./SearchModal.styles\";\nimport { constructGroupName } from \"../../utils/constructGroupName\";\nimport { useHistory } from \"react-router-dom\";\n\ninterface IProps {\n    open: boolean;\n    handleClose: () => void;\n}\n\nconst SearchModal: React.FC<IProps> = ({ open, handleClose }) => {\n    const classes = useStyles();\n    const [searchValue, setSearchValue] = useState<string | null>(null);\n    const { loading, data } = useQuery(SEARCH, {\n        skip: searchValue === null,\n        variables: { by: searchValue },\n    });\n    const history = useHistory();\n\n    const handleChatClick = useCallback(\n        (type: string, object: any) => {\n            return function () {\n                history.push(`/${type}/${object.id}`);\n                handleClose();\n            };\n        },\n        [history, handleClose]\n    );\n\n    const renderList = useMemo(() => {\n        if (loading) {\n            return <Loader />;\n        }\n        if (!data || !data.search) {\n            return <div>No results.</div>;\n        }\n        return (\n            <Dropdown.Menu style={{ background: \"none\" }}>\n                <Dropdown.Item panel className={classes.panelStyles}>\n                    Users\n                </Dropdown.Item>\n                {data.search.users.length > 0 ? (\n                    data.search.users.map((user: IUser, index: number) => (\n                        <Dropdown.Item\n                            key={user.id}\n                            eventKey={index}\n                            onSelect={handleChatClick(\"user\", user)}\n                        >\n                            {user.displayName}\n                        </Dropdown.Item>\n                    ))\n                ) : (\n                    <div className={classes.noResults}>No results...</div>\n                )}\n                <Dropdown.Item divider />\n                <Dropdown.Item panel className={classes.panelStyles}>\n                    Conversations\n                </Dropdown.Item>\n                {data.search.conversations.length > 0 ? (\n                    data.search.conversations.map(\n                        (conversation: any, index: number) => (\n                            <Dropdown.Item\n                                key={conversation.id}\n                                eventKey={index}\n                                onSelect={handleChatClick(\n                                    \"conversation\",\n                                    conversation\n                                )}\n                            >\n                                {constructGroupName(conversation.members, true)}\n                            </Dropdown.Item>\n                        )\n                    )\n                ) : (\n                    <div className={classes.noResults}>No results...</div>\n                )}\n                <Dropdown.Item divider />\n                <Dropdown.Item panel className={classes.panelStyles}>\n                    Channels\n                </Dropdown.Item>\n                {data.search.channels.length > 0 ? (\n                    data.search.channels.map((channel: any, index: number) => (\n                        <Dropdown.Item\n                            key={channel.id}\n                            eventKey={index}\n                            onSelect={handleChatClick(\"conversation\", channel)}\n                        >\n                            #{channel.name}\n                        </Dropdown.Item>\n                    ))\n                ) : (\n                    <div className={classes.noResults}>No results...</div>\n                )}\n            </Dropdown.Menu>\n        );\n    }, [handleChatClick, classes, data, loading]);\n\n    return (\n        <Modal show={open} onHide={handleClose}>\n            <Modal.Header>\n                <Modal.Title>Search</Modal.Title>\n            </Modal.Header>\n            <Modal.Body>\n                <Input\n                    onChange={setSearchValue}\n                    placeholder=\"Enter text you want to search by..\"\n                    className={classes.input}\n                />\n                {renderList}\n            </Modal.Body>\n            <Modal.Footer>\n                <Button onClick={handleClose} appearance=\"subtle\">\n                    Close\n                </Button>\n            </Modal.Footer>\n        </Modal>\n    );\n};\n\nexport default SearchModal;\n","import React, { useCallback, useContext, useState } from \"react\";\nimport { Sidenav, Sidebar, Dropdown, Button, Icon } from \"rsuite\";\nimport { IUser } from \"../../types/interfaces\";\nimport { useHistory } from \"react-router-dom\";\nimport CreateGroupModal from \"../CreateGroupModal/CreateGroupModal\";\nimport { constructGroupName } from \"../../utils/constructGroupName\";\nimport { useStyles } from \"./ChatList.styles\";\nimport CreateChannelModal from \"../CreateChannelModal/CreateChannelModal\";\nimport { UserContext } from \"../../contexts/UserContext\";\nimport SearchModal from \"../SearchModal/SearchModal\";\n\nconst panelStyles = {\n    padding: \"4px 20px\",\n    color: \"#aaa\",\n};\n\nconst iconStyle = {\n    fontSize: 16,\n    cursor: \"pointer\",\n    color: \"#2196f3\",\n    marginLeft: 15,\n};\n\ninterface IProps {\n    users: IUser[];\n    conversations: any[];\n    channels: any[];\n    refetch: () => void;\n}\n\nconst ChatList: React.FC<IProps> = ({\n    users,\n    conversations,\n    refetch,\n    channels,\n}) => {\n    const [showGroupModal, setShowGroupModal] = useState(false);\n    const [showChannelModal, setShowChannelModal] = useState(false);\n    const [showSearchModal, setShowSearchModal] = useState(false);\n    const { onLogout, user } = useContext(UserContext);\n    const classes = useStyles();\n    const history = useHistory();\n\n    const toggleGroupModal = useCallback(() => {\n        setShowGroupModal(!showGroupModal);\n    }, [showGroupModal]);\n\n    const toggleSearchModal = useCallback(() => {\n        setShowSearchModal(!showSearchModal);\n    }, [setShowSearchModal, showSearchModal]);\n\n    const toggleChannelModal = useCallback(() => {\n        setShowChannelModal(!showChannelModal);\n    }, [showChannelModal]);\n\n    function handleChatClick(type: string, object: any) {\n        return function () {\n            history.push(`/${type}/${object.id}`);\n        };\n    }\n\n    return (\n        <>\n            <Sidebar className={classes.container}>\n                <Sidenav appearance=\"subtle\">\n                    <Sidenav.Header>\n                        <div className={classes.header}>\n                            {user?.displayName}\n                            <Button color=\"blue\" onClick={onLogout}>\n                                Logout\n                            </Button>\n                        </div>\n                    </Sidenav.Header>\n                    <Sidenav.Body>\n                        <Button\n                            style={{ marginLeft: 20 }}\n                            onClick={toggleSearchModal}\n                        >\n                            <Icon icon=\"search\" style={{ paddingRight: 5 }} />\n                            Search\n                        </Button>\n                        {(conversations.filter((c) => c.starred).length > 0 ||\n                            channels.filter((c) => c.starred)) && (\n                            <Dropdown.Menu style={{ background: \"none\" }}>\n                                <Dropdown.Item panel style={panelStyles}>\n                                    Starred\n                                </Dropdown.Item>\n                                {conversations\n                                    .filter((c) => c.starred)\n                                    .map((conversation: any, index: number) => (\n                                        <Dropdown.Item\n                                            key={conversation.id}\n                                            eventKey={index}\n                                            onSelect={handleChatClick(\n                                                \"conversation\",\n                                                conversation\n                                            )}\n                                        >\n                                            {constructGroupName(\n                                                conversation.members,\n                                                true\n                                            )}\n                                        </Dropdown.Item>\n                                    ))}\n                                {channels\n                                    .filter((c) => c.starred)\n                                    .map((channel: any, index: number) => (\n                                        <Dropdown.Item\n                                            key={channel.id}\n                                            eventKey={index}\n                                            onSelect={handleChatClick(\n                                                \"conversation\",\n                                                channel\n                                            )}\n                                        >\n                                            #{channel.name}\n                                        </Dropdown.Item>\n                                    ))}\n                                <Dropdown.Item divider />\n                            </Dropdown.Menu>\n                        )}\n                        <Dropdown.Menu style={{ background: \"none\" }}>\n                            <Dropdown.Item panel style={panelStyles}>\n                                Direct Messages\n                            </Dropdown.Item>\n                            {users.length > 0 ? (\n                                users.map((user: IUser, index: number) => (\n                                    <Dropdown.Item\n                                        key={user.id}\n                                        eventKey={index}\n                                        onSelect={handleChatClick(\"user\", user)}\n                                    >\n                                        {user.displayName}\n                                    </Dropdown.Item>\n                                ))\n                            ) : (\n                                <div style={{ padding: \"5px 20px\" }}>\n                                    No results\n                                </div>\n                            )}\n                            <Dropdown.Item divider />\n                        </Dropdown.Menu>\n                        <Dropdown.Menu style={{ background: \"none\" }}>\n                            <Dropdown.Item panel style={panelStyles}>\n                                Group conversations\n                                <Icon\n                                    icon=\"plus-circle\"\n                                    style={iconStyle}\n                                    onClick={toggleGroupModal}\n                                />\n                            </Dropdown.Item>\n                            {conversations.filter((c) => !c.starred).length >\n                            0 ? (\n                                conversations\n                                    .filter((c) => !c.starred)\n                                    .map((conversation: any, index: number) => (\n                                        <Dropdown.Item\n                                            key={conversation.id}\n                                            eventKey={index}\n                                            onSelect={handleChatClick(\n                                                \"conversation\",\n                                                conversation\n                                            )}\n                                        >\n                                            {constructGroupName(\n                                                conversation.members,\n                                                true\n                                            )}\n                                        </Dropdown.Item>\n                                    ))\n                            ) : (\n                                <div style={{ padding: \"5px 20px\" }}>\n                                    No results\n                                </div>\n                            )}\n                            <Dropdown.Item divider />\n                        </Dropdown.Menu>\n                        <Dropdown.Menu style={{ background: \"none\" }}>\n                            <Dropdown.Item panel style={panelStyles}>\n                                Channels\n                                <Icon\n                                    icon=\"plus-circle\"\n                                    style={iconStyle}\n                                    onClick={toggleChannelModal}\n                                />\n                            </Dropdown.Item>\n                            {channels.filter((c) => !c.starred).length > 0 ? (\n                                channels\n                                    .filter((c) => !c.starred)\n                                    .map((channel: any, index: number) => (\n                                        <Dropdown.Item\n                                            key={channel.id}\n                                            eventKey={index}\n                                            onSelect={handleChatClick(\n                                                \"conversation\",\n                                                channel\n                                            )}\n                                        >\n                                            #{channel.name}\n                                        </Dropdown.Item>\n                                    ))\n                            ) : (\n                                <div style={{ padding: \"5px 20px\" }}>\n                                    No results\n                                </div>\n                            )}\n                            <Dropdown.Item divider />\n                        </Dropdown.Menu>\n                    </Sidenav.Body>\n                </Sidenav>\n            </Sidebar>\n            <SearchModal\n                open={showSearchModal}\n                handleClose={toggleSearchModal}\n            />\n            <CreateGroupModal\n                open={showGroupModal}\n                handleClose={toggleGroupModal}\n                refetch={refetch}\n                users={users}\n            />\n            <CreateChannelModal\n                open={showChannelModal}\n                handleClose={toggleChannelModal}\n                refetch={refetch}\n                users={users}\n            />\n        </>\n    );\n};\n\nexport default React.memo(ChatList);\n","import { createUseStyles } from \"react-jss\";\nimport { ColorEnum } from \"../../types/enums/ColorEnum\";\n\nexport const useStyles = createUseStyles({\n    container: {\n        background: ColorEnum.LightGrey,\n        height: \"100%\",\n    },\n    header: {\n        height: 60,\n        padding: \"20px 20px 15px\",\n        display: \"flex\",\n        justifyContent: \"space-between\",\n        alignItems: \"center\",\n        background: ColorEnum.White,\n        borderBottom: 1,\n        borderBottomStyle: \"solid\",\n        borderBottomColor: ColorEnum.LighterGrey,\n    },\n    content: {\n        height: \"calc(100% - 100px)\",\n        overflow: \"auto\",\n    },\n    footer: {\n        padding: 10,\n        border: 0,\n        alignItems: \"center\",\n    },\n    yellow: {\n        color: \"#FFA500\",\n    },\n    pointer: {\n        cursor: \"pointer\",\n    },\n});\n","import { gql } from \"@apollo/client\";\n\nexport const GET_CONVERSATION_MESSAGES = gql`\n    query conversationMessages($id: String!) {\n        messages: conversationMessages(conversationId: $id) {\n            id\n            sender {\n                id\n                email\n                displayName\n                phoneNumber\n                description\n                imageUrl\n            }\n            content\n            createdAt\n            updatedAt\n            replyCount\n            imageUrl\n            type\n            pinned\n        }\n    }\n`;\n","import { gql } from \"@apollo/client\";\n\nexport const GET_REPLIES = gql`\n    query replies($id: String!) {\n        messages: replies(parentId: $id) {\n            id\n            sender {\n                id\n                email\n                displayName\n                phoneNumber\n                description\n                imageUrl\n            }\n            content\n            createdAt\n            updatedAt\n            replyCount\n            imageUrl\n            type\n            pinned\n        }\n    }\n`;\n","import { GET_PRIVATE_MESSAGES } from \"../graphql/queries\";\nimport { GET_CONVERSATION_MESSAGES } from \"../graphql/queries/GET_CONVERSATION_MESSAGES\";\nimport { GET_REPLIES } from \"../graphql/queries/GET_REPLIES\";\n\nexport const getQueryByType = (type: string | null) => {\n    if (type === \"user\" || type === \"Private\") {\n        return {\n            query: GET_PRIVATE_MESSAGES,\n        };\n    }\n    if (type === \"Reply\") {\n        return {\n            query: GET_REPLIES,\n        };\n    }\n    return {\n        query: GET_CONVERSATION_MESSAGES,\n    };\n};\n","import { gql } from \"@apollo/client\";\n\nexport const LEAVE_CONVERSATION = gql`\n    mutation leaveConversation($id: String!) {\n        leaveConversation(id: $id) {\n            id\n            type\n            starred\n            createdAt\n        }\n    }\n`;\n","import { gql } from \"@apollo/client\";\n\nexport const ADD_MEMBERS = gql`\n    mutation addMembers($members: [String!]!, $id: String!) {\n        addMembers(members: $members, id: $id) {\n            id\n            type\n            starred\n            createdAt\n            members {\n                id\n                email\n                displayName\n                phoneNumber\n                description\n                imageUrl\n            }\n        }\n    }\n`;\n","import React, { useCallback, useState } from \"react\";\nimport { Button, CheckPicker, Message, Modal } from \"rsuite\";\nimport { useMutation } from \"@apollo/client\";\nimport { ADD_MEMBERS } from \"../../graphql/mutations/ADD_MEMBERS\";\nimport { GraphQLError } from \"graphql\";\n\ninterface IProps {\n    id: string;\n    open: boolean;\n    handleClose: () => void;\n    refetch: () => void;\n    users: any;\n}\n\nconst AddMembersModal: React.FC<IProps> = ({\n    open,\n    handleClose,\n    users,\n    refetch,\n    id,\n}) => {\n    const [errors, setErrors] = useState<readonly GraphQLError[]>([]);\n    const [selectedUsers, setSelectedUsers] = useState<string[]>([]);\n    const [addMembers, { loading }] = useMutation(ADD_MEMBERS, {\n        onCompleted() {\n            refetch();\n            handleClose();\n        },\n        onError({ graphQLErrors }) {\n            setErrors(graphQLErrors);\n        },\n    });\n\n    const handleSubmit = useCallback(async () => {\n        await addMembers({ variables: { members: selectedUsers, id } });\n        setSelectedUsers([]);\n    }, [selectedUsers, addMembers, id]);\n\n    const handleOnChange = useCallback((value: any) => {\n        setSelectedUsers(value);\n    }, []);\n\n    const data = users.map((user: any) => ({\n        label: user.displayName,\n        value: user.id,\n    }));\n\n    return (\n        <Modal show={open} onHide={handleClose}>\n            <Modal.Header>\n                <Modal.Title>Create a new group</Modal.Title>\n            </Modal.Header>\n            <Modal.Body>\n                {errors.map((error, index) => (\n                    <Message\n                        key={`error-${index}`}\n                        showIcon\n                        type=\"error\"\n                        description={error.message}\n                    />\n                ))}\n                <CheckPicker\n                    placeholder=\"Add users to group / channel\"\n                    data={data}\n                    onChange={handleOnChange}\n                    value={selectedUsers}\n                    style={{ width: \"100%\" }}\n                />\n            </Modal.Body>\n            <Modal.Footer>\n                <Button\n                    onClick={handleSubmit}\n                    disabled={loading}\n                    appearance=\"primary\"\n                >\n                    Ok\n                </Button>\n                <Button\n                    onClick={handleClose}\n                    disabled={loading}\n                    appearance=\"subtle\"\n                >\n                    Cancel\n                </Button>\n            </Modal.Footer>\n        </Modal>\n    );\n};\n\nexport default React.memo(AddMembersModal);\n","import { createUseStyles } from \"react-jss\";\nimport { ColorEnum } from \"../../types/enums/ColorEnum\";\n\nexport const useStyles = createUseStyles({\n    container: {\n        display: \"flex\",\n        margin: \"10px 20px\",\n    },\n    bold: {\n        color: \"#000\",\n        fontWeight: \"bold\",\n    },\n    avatar: {\n        background: \"#3498FF\",\n    },\n    noBorderBottomRadius: {\n        borderBottomLeftRadius: 0,\n        borderBottomRightRadius: 0,\n    },\n    withBorderBottomRadius: {\n        borderBottomLeftRadius: 4,\n        borderBottomRightRadius: 4,\n    },\n    replyWrapper: {\n        marginLeft: 10,\n        background: ColorEnum.BackgroundGrey,\n        borderTopWidth: 1,\n        borderTopColor: ColorEnum.BorderGrey,\n        borderTopStyle: \"solid\",\n        padding: \"5px 10px\",\n        fontSize: 12,\n    },\n    repliesCount: {\n        color: ColorEnum.Blue,\n        cursor: \"pointer\",\n        fontWeight: 700,\n\n        \"&:hover\": {\n            textDecoration: \"underline\",\n        },\n    },\n    messageWrapper: {\n        width: \"100%\",\n    },\n    message: {\n        background: ColorEnum.White,\n        padding: \"5px 10px\",\n        fontSize: 12,\n        marginLeft: 10,\n        borderTopLeftRadius: 4,\n        borderTopRightRadius: 4,\n    },\n    content: {\n        padding: \"5px 0\",\n    },\n    flex: {\n        display: \"flex\",\n    },\n    alignCenter: {\n        alignItems: \"center\",\n    },\n    date: {\n        color: \"#aaa\",\n        fontSize: 10,\n        marginLeft: 10,\n    },\n    moreIconBtn: {\n        color: ColorEnum.Grey,\n        cursor: \"pointer\",\n        marginLeft: \"auto\",\n        paddingLeft: 5,\n        paddingRight: 5,\n        alignItems: \"center\",\n        borderRadius: 6,\n\n        \"&:hover\": {\n            backgroundColor: ColorEnum.LightGrey,\n        },\n    },\n    image: {\n        maxWidth: \"100%\",\n    },\n    thumbTack: {\n        marginLeft: \"auto\",\n        marginRight: 10,\n        cursor: \"pointer\",\n    },\n    pinned: {\n        color: ColorEnum.Blue,\n    },\n    notPinned: {\n        color: ColorEnum.Grey,\n    },\n});\n","import { IMessage } from \"../../types/interfaces/Message\";\nimport { createContext } from \"react\";\n\ninterface ISidebarContext {\n    isOpen: boolean;\n    selectedThread: IMessage | null;\n}\n\nexport const SidebarContext = createContext<ISidebarContext>({\n    isOpen: false,\n    selectedThread: null,\n});\n","import { IMessage } from \"../../types/interfaces/Message\";\nimport { createContext } from \"react\";\n\ninterface ISidebarUpdateContext {\n    close: () => void;\n    selectThread: (message: IMessage) => void;\n}\n\nexport const SidebarUpdateContext = createContext<ISidebarUpdateContext>({\n    close: () => {},\n    selectThread: () => {},\n});\n","import React, { useState, useCallback, useMemo } from \"react\";\nimport { IMessage } from \"../../types/interfaces/Message\";\nimport { SidebarUpdateContext } from \"./UpdateContext\";\nimport { SidebarContext } from \"./Context\";\n\nexport const SidebarProvider: React.FC = ({ children }) => {\n    const [isOpen, setIsOpen] = useState<boolean>(false);\n    const [selectedThread, setSelectedThread] = useState<IMessage | null>(null);\n\n    const close = useCallback(() => {\n        setSelectedThread(null);\n        setIsOpen(false);\n    }, [setIsOpen]);\n\n    const selectThread = useCallback(\n        (message: IMessage) => {\n            setSelectedThread(message);\n            setIsOpen(true);\n        },\n        [setSelectedThread, setIsOpen]\n    );\n\n    const updateValue = useMemo(() => ({ close, selectThread }), [\n        close,\n        selectThread,\n    ]);\n\n    const value = useMemo(() => ({ isOpen, selectedThread }), [\n        isOpen,\n        selectedThread,\n    ]);\n\n    return (\n        <SidebarUpdateContext.Provider value={updateValue}>\n            <SidebarContext.Provider value={value}>\n                {children}\n            </SidebarContext.Provider>\n        </SidebarUpdateContext.Provider>\n    );\n};\n","import { createUseStyles } from \"react-jss\";\nimport { ColorEnum } from \"../../types/enums/ColorEnum\";\n\nexport const useStyles = createUseStyles({\n    flex: {\n        // display: \"flex\",\n    },\n    inputWrapper: {\n        display: \"flex\",\n        background: ColorEnum.White,\n        border: 4,\n    },\n    input: {\n        fontSize: 13,\n        padding: 10,\n        flex: 1,\n    },\n    border: {\n        borderBottomWidth: 1,\n        borderBottomStyle: \"solid\",\n        borderBottomColor: ColorEnum.BorderGrey,\n    },\n    blueIcon: {\n        color: ColorEnum.Blue,\n        width: 30,\n        marginTop: 10,\n        cursor: \"pointer\",\n    },\n    grey: {\n        color: ColorEnum.Grey,\n    },\n    emojiSelect: {\n        bottom: 50,\n    },\n});\n","import { createUseStyles } from \"react-jss\";\nimport { ColorEnum } from \"../../../types/enums/ColorEnum\";\n\nexport const useStyles = createUseStyles({\n    wrapper: {\n        display: \"flex\",\n        justifyContent: \"flex-end\",\n        background: ColorEnum.BackgroundGrey,\n        borderTopWidth: 1,\n        borderTopColor: ColorEnum.BorderGrey,\n        borderTopStyle: \"solid\",\n        padding: \"5px 10px\",\n        fontSize: 12,\n    },\n});\n","import { createUseStyles } from \"react-jss\";\n\nexport const useStyles = createUseStyles({\n    textWrapper: {\n        lineHeight: \"200px\",\n    },\n});\n","import React from \"react\";\nimport { Uploader } from \"rsuite\";\nimport { FileType } from \"rsuite/es/Uploader\";\nimport { useStyles } from \"./UploadInput.styles\";\n\ninterface IProps {\n    selectedFile: File | null;\n    handleChange: (fileList: FileType[]) => void;\n}\n\nconst UploadInput: React.FC<IProps> = ({ selectedFile, handleChange }) => {\n    const classes = useStyles();\n    return (\n        <>\n            <Uploader\n                disabled={!!selectedFile}\n                autoUpload={false}\n                onChange={handleChange}\n                multiple={false}\n                listType=\"picture-text\"\n                accept={\"image/*\"}\n                draggable={true}\n            >\n                <div className={classes.textWrapper}>\n                    Select image to upload\n                </div>\n            </Uploader>\n        </>\n    );\n};\n\nexport default UploadInput;\n","import React, { useCallback, useState } from \"react\";\nimport { Button, Modal } from \"rsuite\";\nimport UploadInput from \"./UploadInput/UploadInput\";\nimport { FileType } from \"rsuite/es/Uploader\";\n\ninterface IProps {\n    open: boolean;\n    handleClose: () => void;\n    handleSubmit?: (message: string | null, image: File | null) => void;\n}\n\nconst ImageUploadModal: React.FC<IProps> = ({\n    open,\n    handleClose,\n    handleSubmit,\n}) => {\n    const [selectedFile, setSelectedFile] = useState<File | null>(null);\n\n    const handleFileSelect = useCallback(\n        (fileList: FileType[]) => {\n            if (fileList.length === 0) {\n                setSelectedFile(null);\n                return;\n            }\n            setSelectedFile(fileList[0].blobFile || null);\n        },\n        [setSelectedFile]\n    );\n\n    const handleUpload = useCallback(() => {\n        if (handleSubmit) {\n            handleSubmit(null, selectedFile);\n            setSelectedFile(null);\n            handleClose();\n        }\n    }, [handleSubmit, selectedFile, handleClose]);\n\n    return (\n        <Modal show={open} onHide={handleClose}>\n            <Modal.Header>\n                <Modal.Title>Upload image</Modal.Title>\n            </Modal.Header>\n            <Modal.Body>\n                <UploadInput\n                    handleChange={handleFileSelect}\n                    selectedFile={selectedFile}\n                />\n            </Modal.Body>\n            <Modal.Footer>\n                <Button\n                    disabled={!selectedFile}\n                    onClick={handleUpload}\n                    appearance=\"primary\"\n                >\n                    Upload\n                </Button>\n                <Button onClick={handleClose} appearance=\"subtle\">\n                    Cancel\n                </Button>\n            </Modal.Footer>\n        </Modal>\n    );\n};\n\nexport default ImageUploadModal;\n","import React, { useCallback, useMemo, useState } from \"react\";\nimport { useStyles } from \"./Toolbar.styles\";\nimport { Icon, IconButton } from \"rsuite\";\nimport ImageUploadModal from \"../../ImageUploadModal/ImageUploadModal\";\nimport { FileType } from \"rsuite/es/Uploader\";\n\ninterface IProps {\n    handleSubmit?: (message: string | null, image: File | null) => void;\n}\n\nconst Toolbar: React.FC<IProps> = ({ handleSubmit }) => {\n    const [showImageModal, setShowImageModal] = useState(false);\n    const classes = useStyles();\n\n    const handleAttachmentClick = useCallback(() => {\n        setShowImageModal(true);\n    }, [setShowImageModal]);\n\n    const attachmentIcon = useMemo(\n        () => <Icon icon=\"attachment\" onClick={handleAttachmentClick} />,\n        [handleAttachmentClick]\n    );\n\n    const handleModalClose = useCallback(() => {\n        setShowImageModal(false);\n    }, [setShowImageModal]);\n\n    return (\n        <>\n            <div className={classes.wrapper}>\n                <IconButton icon={attachmentIcon} />\n            </div>\n            <ImageUploadModal\n                open={showImageModal}\n                handleSubmit={handleSubmit}\n                handleClose={handleModalClose}\n            />\n        </>\n    );\n};\n\nexport default Toolbar;\n","import React, { useCallback, useMemo, useState } from \"react\";\nimport { useStyles } from \"./MessageInput.styles\";\nimport \"draft-js/dist/Draft.css\";\nimport \"draft-js-hashtag-plugin/lib/plugin.css\";\nimport \"draft-js-emoji-plugin/lib/plugin.css\";\nimport \"draft-js-mention-plugin/lib/plugin.css\";\nimport Editor from \"draft-js-plugins-editor\";\nimport createEmojiPlugin from \"draft-js-emoji-plugin\";\nimport { convertFromRaw, convertToRaw, EditorState } from \"draft-js\";\n// @ts-ignore\nimport createHashtagPlugin from \"draft-js-hashtag-plugin\";\n// @ts-ignore\nimport createMentionPlugin from \"draft-js-mention-plugin\";\n// @ts-ignore\nimport { defaultSuggestionsFilter } from \"draft-js-mention-plugin\";\n// @ts-ignore\nimport { clearEditorContent } from \"draftjs-utils\";\nimport { Icon } from \"rsuite\";\nimport { IMessage, IUser } from \"../../types/interfaces\";\nimport { useHistory } from \"react-router-dom\";\nimport clsx from \"clsx\";\nimport Toolbar from \"./Toolbar/Toolbar\";\n\nconst positionSuggestions = (settings: any) => {\n    const popoverWidth = 250;\n    const popoverLeft = settings.decoratorRect.left;\n    const windowWidth = window.innerWidth;\n    const left =\n        windowWidth - popoverLeft > popoverWidth\n            ? popoverLeft\n            : windowWidth - popoverWidth;\n    return {\n        left: left + \"px\",\n        top: settings.decoratorRect.top - 40 + \"px\",\n        display: \"block\",\n        transform: \"scale(1) translateY(-100%)\",\n        transformOrigin: \"1em 0% 0px\",\n        transition: \"all 0.25s cubic-bezier(0.3, 1.2, 0.2, 1)\",\n    };\n};\n\ninterface IProps {\n    html?: string;\n    readOnly?: boolean;\n    handleSubmit?: (message: string | null, image: File | null) => void;\n    users: IUser[];\n    conversations: any[];\n    channels: any[];\n    isEditing?: boolean;\n    handleCancelEdit?: () => void;\n}\n\nconst MessageInput: React.FC<IProps> = ({\n    handleSubmit,\n    readOnly,\n    html,\n    users,\n    channels,\n    isEditing,\n    handleCancelEdit,\n}) => {\n    const history = useHistory();\n    const classes = useStyles();\n    const mentions = useMemo(\n        () => users.map((user) => ({ id: user.id, name: user.displayName })),\n        [users]\n    );\n    const [suggestions, setSuggestions] = useState(mentions);\n    const [editorState, setEditorState] = useState(\n        html\n            ? EditorState.createWithContent(\n                  convertFromRaw(JSON.parse(html) as any) as any\n              )\n            : EditorState.createEmpty()\n    );\n\n    const handleStateChange = useCallback(\n        (state: EditorState) => {\n            setEditorState(state);\n        },\n        [setEditorState]\n    );\n\n    const handleMessageEnter = useCallback(() => {\n        if (handleSubmit && editorState.getCurrentContent().hasText()) {\n            const raw: any = JSON.stringify(\n                convertToRaw(editorState.getCurrentContent())\n            );\n            handleSubmit(raw, null);\n\n            const state = clearEditorContent(editorState);\n            handleStateChange(state);\n        }\n    }, [handleStateChange, editorState, handleSubmit]);\n\n    const Emoji = useMemo(() => {\n        const emojiPlugin = createEmojiPlugin({\n            positionSuggestions,\n        });\n        const { EmojiSuggestions } = emojiPlugin;\n        return { emojiPlugin, EmojiSuggestions };\n    }, []);\n\n    const handleMentionClick = useCallback(\n        (id: string) => () => {\n            if (readOnly) {\n                if (users.find((user) => user.id === id)) {\n                    history.push(\"/user/\" + id);\n                }\n            }\n        },\n        [history, users, readOnly]\n    );\n\n    const mentionComponent = useCallback(\n        (mentionProps: any) => {\n            const style = {};\n            if (!readOnly) {\n                Object.assign(style, { cursor: \"default\" });\n            }\n            return (\n                <span\n                    style={style}\n                    className={mentionProps.className}\n                    onClick={handleMentionClick(mentionProps.mention.id)}\n                >\n                    {mentionProps.children}\n                </span>\n            );\n        },\n        [readOnly, handleMentionClick]\n    );\n\n    const Mentions = useMemo(() => {\n        const mentionPlugin = createMentionPlugin({\n            positionSuggestions,\n            mentionComponent,\n        });\n        const { MentionSuggestions } = mentionPlugin;\n        return { mentionPlugin, MentionSuggestions };\n    }, [mentionComponent]);\n\n    const onClick = useCallback(\n        (hashtag: string) => () => {\n            const channel = channels.find(\n                (channel) => `#${channel.name}` === hashtag\n            );\n            if (channel) {\n                history.push(\"/conversation/\" + channel.id);\n            }\n        },\n        [channels, history]\n    );\n\n    const hashtagDecoratorComponentEx = useCallback(\n        (hashtagDecoratorComponent: any) => (props: any) => {\n            const style = { cursor: \"pointer\" };\n            const newProps = { ...props };\n            if (readOnly) {\n                Object.assign(newProps, {\n                    onClick: onClick(props.decoratedText),\n                    style,\n                });\n            }\n            return hashtagDecoratorComponent(newProps);\n        },\n        [onClick, readOnly]\n    );\n\n    const HashTag = useMemo(() => {\n        const hashTagPlugin = createHashtagPlugin();\n        const component = hashTagPlugin.decorators[0].component;\n        hashTagPlugin.decorators[0].component = hashtagDecoratorComponentEx(\n            component\n        );\n        return { hashTagPlugin };\n    }, [hashtagDecoratorComponentEx]);\n\n    const onSearchChange = useCallback(\n        ({ value }) => {\n            setSuggestions(defaultSuggestionsFilter(value, mentions));\n        },\n        [mentions, setSuggestions]\n    );\n\n    const handleCancel = useCallback(() => {\n        if (handleCancelEdit) {\n            handleCancelEdit();\n        }\n    }, [handleCancelEdit]);\n\n    const allowEdit = useMemo(() => {\n        if (readOnly) {\n            return isEditing;\n        }\n        return true;\n    }, [readOnly, isEditing]);\n\n    return (\n        <div className={classes.flex}>\n            <div className={classes.inputWrapper}>\n                <div\n                    className={clsx({\n                        [classes.input]: allowEdit,\n                        [classes.border]: isEditing,\n                    })}\n                >\n                    <Editor\n                        editorState={editorState}\n                        onChange={handleStateChange}\n                        placeholder=\"Enter your text here...\"\n                        readOnly={!allowEdit}\n                        plugins={[\n                            Emoji.emojiPlugin,\n                            Mentions.mentionPlugin,\n                            HashTag.hashTagPlugin,\n                        ]}\n                    />\n                </div>\n                <Emoji.EmojiSuggestions />\n                <Mentions.MentionSuggestions\n                    onSearchChange={onSearchChange}\n                    onAddMention={() => {}}\n                    suggestions={suggestions}\n                />\n                {allowEdit && (\n                    <Icon\n                        icon=\"arrow-right\"\n                        size=\"lg\"\n                        className={classes.blueIcon}\n                        onClick={handleMessageEnter}\n                    />\n                )}\n                {isEditing && (\n                    <Icon\n                        icon=\"close\"\n                        size=\"lg\"\n                        className={clsx(classes.blueIcon, classes.grey)}\n                        onClick={handleCancel}\n                    />\n                )}\n            </div>\n            {!readOnly && <Toolbar handleSubmit={handleSubmit} />}\n        </div>\n    );\n};\n\nexport default MessageInput;\n","import { gql } from \"@apollo/client\";\n\nexport const DELETE_MSG = gql`\n    mutation deleteMessage($id: String!) {\n        deleteMessage(messageId: $id)\n    }\n`;\n","import { gql } from \"@apollo/client\";\n\nexport const TOGGLE_PIN = gql`\n    mutation togglePinned($id: String!) {\n        togglePinned(id: $id) {\n            id\n            sender {\n                id\n                email\n                displayName\n                phoneNumber\n                description\n                imageUrl\n            }\n            type\n            content\n            imageUrl\n            createdAt\n            updatedAt\n            pinned\n            replyCount\n            parent\n        }\n    }\n`;\n","import React, { useCallback, useContext, useState } from \"react\";\nimport { IMessage, IUser } from \"../../types/interfaces\";\nimport { useStyles } from \"./Message.styles\";\nimport { Avatar, Dropdown, Icon, Loader } from \"rsuite\";\n// @ts-ignore\nimport uniqolor from \"uniqolor\";\nimport clsx from \"clsx\";\nimport { ColorEnum } from \"../../types/enums/ColorEnum\";\nimport { SidebarUpdateContext } from \"../../contexts/Sidebar\";\nimport MessageInput from \"../MessageInput/MessageInput\";\nimport { UserContext } from \"../../contexts/UserContext\";\nimport { useMutation } from \"@apollo/client\";\nimport { SEND_MESSAGE } from \"../../graphql/mutations\";\nimport { getQueryByType } from \"../../utils/getQueryByType\";\nimport { DELETE_MSG } from \"../../graphql/mutations/DELETE_MESSAGE\";\nimport { useRouteMatch } from \"react-router-dom\";\nimport { TOGGLE_PIN } from \"../../graphql/mutations/TOGGLE_PIN\";\n\ninterface IProps {\n    message: IMessage;\n    isThreadMessage: boolean;\n    users: IUser[];\n    conversations: any[];\n    channels: any[];\n}\n\nconst Message: React.FC<IProps> = ({\n    message,\n    isThreadMessage,\n    users,\n    conversations,\n    channels,\n}) => {\n    const [loading, setLoading] = useState(false);\n    const [isEditing, setIsEditing] = useState(false);\n    const [isDropdownOpen, setIsDropdownOpen] = useState(false);\n    const match = useRouteMatch<any>();\n    const { user } = useContext(UserContext);\n    const { selectThread } = useContext(SidebarUpdateContext);\n    const { id, sender, content, updatedAt } = message;\n    const classes = useStyles();\n    const avatarBackground = uniqolor(\n        sender.id + sender.email + sender.displayName\n    );\n    const avatarColor = avatarBackground.isLight\n        ? ColorEnum.Black\n        : ColorEnum.White;\n    const date = new Date(updatedAt).toLocaleString();\n    const [deleteMessageMutation] = useMutation(DELETE_MSG, {\n        update: function (cache, { data: { deleteMessage } }) {\n            const query = cache.readQuery<any>({\n                query: getQueryByType(message.type).query,\n                variables: { id: match.params.id },\n            });\n            const messages = query.messages.filter(\n                (m: IMessage) => m.id !== id\n            );\n            cache.writeQuery({\n                query: getQueryByType(message.type).query,\n                variables: { id: match.params.id },\n                data: { messages },\n            });\n        },\n    });\n\n    const [togglePinMutation] = useMutation(TOGGLE_PIN, {\n        update: function (cache, { data: { togglePinned } }) {\n            const query = cache.readQuery<any>({\n                query: getQueryByType(message.type).query,\n                variables: { id: match.params.id },\n            });\n            const messages = query.messages.map((m: IMessage) => {\n                if (m.id === togglePinned.id) {\n                    return {\n                        ...m,\n                        pinned: togglePinned.pinned,\n                    };\n                    return m;\n                }\n            });\n            cache.writeQuery({\n                query: getQueryByType(message.type).query,\n                variables: { id: match.params.id },\n                data: { messages },\n            });\n        },\n    });\n\n    const handlePinClick = useCallback(async () => {\n        await togglePinMutation({ variables: { id: message.id } });\n    }, [message, togglePinMutation]);\n\n    const [sendMessageMutation] = useMutation(SEND_MESSAGE, {\n        update: function (cache, { data: { sendMessage } }) {\n            const query = cache.readQuery<any>({\n                query: getQueryByType(message.type).query,\n                variables: { id: match.params.id },\n            });\n            cache.writeQuery({\n                query: getQueryByType(message.type).query,\n                variables: { id: match.params.id },\n                data: {\n                    messages: query.messages.map((m: IMessage) => {\n                        if (m.id === message.id) {\n                            return sendMessage;\n                        }\n                        return m;\n                    }),\n                },\n            });\n            setLoading(false);\n            setIsEditing(false);\n        },\n    });\n\n    const handleSubmit = useCallback(\n        async (content: string | null, image: File | null) => {\n            setLoading(true);\n            await sendMessageMutation({\n                variables: {\n                    data: {\n                        id: message.id,\n                        content,\n                        type: message.type,\n                        targetId: match.params.id,\n                    },\n                },\n            });\n        },\n        [match.params.id, message, sendMessageMutation]\n    );\n\n    const handleToggle = useCallback(\n        (open) => {\n            setIsDropdownOpen(open);\n        },\n        [setIsDropdownOpen]\n    );\n\n    const handleReplySelect = useCallback(() => {\n        selectThread(message);\n    }, [message, selectThread]);\n\n    const handleDelete = useCallback(async () => {\n        setIsDropdownOpen(false);\n        await deleteMessageMutation({ variables: { id } });\n    }, [id, deleteMessageMutation, setIsDropdownOpen]);\n\n    const handleEdit = useCallback(() => {\n        setIsDropdownOpen(false);\n        setIsEditing(true);\n    }, [setIsDropdownOpen, setIsEditing]);\n\n    const handleCancel = useCallback(() => {\n        setIsEditing(false);\n    }, [setIsEditing]);\n\n    const renderTitle = useCallback(\n        () => <Icon className={classes.moreIconBtn} icon=\"more\" size={\"2x\"} />,\n        [classes]\n    );\n\n    const showReplyCount = message.replyCount > 0 && !isThreadMessage;\n    const isSender = message.sender.id === user?.id;\n\n    return (\n        <div className={classes.container}>\n            <Avatar\n                className={classes.avatar}\n                style={{\n                    background: avatarBackground.color,\n                    color: avatarColor,\n                }}\n            >\n                {sender.displayName[0]}\n            </Avatar>\n            <div className={classes.messageWrapper}>\n                <div\n                    className={clsx({\n                        [classes.message]: true,\n                        [classes.noBorderBottomRadius]: showReplyCount,\n                        [classes.withBorderBottomRadius]: !showReplyCount,\n                    })}\n                >\n                    <div\n                        className={clsx(\n                            classes.bold,\n                            classes.flex,\n                            classes.alignCenter\n                        )}\n                    >\n                        <span>{sender.displayName}</span>\n                        <span className={classes.date}>{date}</span>\n                        <Icon\n                            icon=\"thumb-tack\"\n                            onClick={handlePinClick}\n                            className={clsx({\n                                [classes.thumbTack]: true,\n                                [classes.pinned]: message.pinned,\n                                [classes.notPinned]: !message.pinned,\n                            })}\n                        />\n                        <Dropdown\n                            placement=\"bottomEnd\"\n                            renderTitle={renderTitle}\n                            open={isDropdownOpen}\n                            onToggle={handleToggle}\n                        >\n                            <Dropdown.Item onSelect={handleReplySelect}>\n                                Reply\n                            </Dropdown.Item>\n                            {isSender && (\n                                <>\n                                    <Dropdown.Item onSelect={handleDelete}>\n                                        Delete\n                                    </Dropdown.Item>\n                                    <Dropdown.Item onSelect={handleEdit}>\n                                        Edit\n                                    </Dropdown.Item>\n                                </>\n                            )}\n                        </Dropdown>\n                    </div>\n                    {loading ? (\n                        <Loader />\n                    ) : (\n                        <div className={classes.content}>\n                            {content ? (\n                                <MessageInput\n                                    users={users}\n                                    conversations={conversations}\n                                    channels={channels}\n                                    html={content}\n                                    readOnly={true}\n                                    isEditing={isEditing}\n                                    handleCancelEdit={handleCancel}\n                                    handleSubmit={handleSubmit}\n                                />\n                            ) : (\n                                <img\n                                    src={message.imageUrl}\n                                    className={classes.image}\n                                />\n                            )}\n                        </div>\n                    )}\n                </div>\n                {showReplyCount && (\n                    <div\n                        className={clsx(\n                            classes.replyWrapper,\n                            classes.withBorderBottomRadius\n                        )}\n                    >\n                        <span\n                            onClick={handleReplySelect}\n                            className={classes.repliesCount}\n                        >\n                            {message.replyCount} replies\n                        </span>\n                    </div>\n                )}\n            </div>\n        </div>\n    );\n};\n\nexport default Message;\n","import { createUseStyles } from \"react-jss\";\n\nexport const useStyles = createUseStyles({\n    info: {\n        textAlign: \"center\",\n        fontSize: 18,\n        marginTop: 40,\n    },\n});\n","import React from \"react\";\nimport { IMessage } from \"../../types/interfaces/Message\";\nimport Message from \"../../components/Message/Message\";\nimport { IUser } from \"../../types/interfaces\";\nimport { useStyles } from \"./MessagesList.styles\";\n\ninterface IProps {\n    messages: IMessage[];\n    isThread: boolean;\n    users: IUser[];\n    conversations: any[];\n    channels: any[];\n}\n\nconst MessagesList: React.FC<IProps> = ({\n    messages,\n    isThread,\n    users,\n    conversations,\n    channels,\n}) => {\n    const classes = useStyles();\n    return (\n        <>\n            {messages.length > 0 ? (\n                messages.map((message, index: number) => (\n                    <Message\n                        users={users}\n                        conversations={conversations}\n                        channels={channels}\n                        key={message.id + message.updatedAt}\n                        message={message}\n                        isThreadMessage={isThread}\n                    />\n                ))\n            ) : (\n                <div className={classes.info}>\n                    There are no messages in this conversation. Write a message\n                    to begin conversation.\n                </div>\n            )}\n        </>\n    );\n};\n\nexport default React.memo(MessagesList);\n","import React from \"react\";\nimport { Button, Modal } from \"rsuite\";\n\ninterface IProps {\n    open: boolean;\n    handleClose: () => void;\n    handleConfirm: () => void;\n}\n\nconst LeaveConfirmModal: React.FC<IProps> = ({\n    open,\n    handleConfirm,\n    handleClose,\n}) => {\n    return (\n        <Modal show={open} onHide={handleClose}>\n            <Modal.Header>\n                <Modal.Title>Leave conversation</Modal.Title>\n            </Modal.Header>\n            <Modal.Body>\n                <p>Do you really want to leave this conversation?</p>\n            </Modal.Body>\n            <Modal.Footer>\n                <Button onClick={handleConfirm} appearance=\"primary\">\n                    Yes\n                </Button>\n                <Button onClick={handleClose} color=\"red\">\n                    No\n                </Button>\n            </Modal.Footer>\n        </Modal>\n    );\n};\n\nexport default React.memo(LeaveConfirmModal);\n","import React, { useCallback, useEffect, useRef, useState } from \"react\";\nimport {\n    Container,\n    Header,\n    Footer,\n    Loader,\n    Button,\n    Icon,\n    Dropdown,\n} from \"rsuite\";\nimport { useStyles } from \"./ActiveChat.styles\";\nimport { IMessageData, IMessageVars, IUser } from \"../../types/interfaces\";\nimport { useMutation, useQuery } from \"@apollo/client\";\nimport { SEND_MESSAGE, TOGGLE_STAR } from \"../../graphql/mutations\";\nimport { constructGroupName } from \"../../utils/constructGroupName\";\nimport { getQueryByType } from \"../../utils/getQueryByType\";\nimport { LEAVE_CONVERSATION } from \"../../graphql/mutations/LEAVE_CONVERSATION\";\nimport { useHistory } from \"react-router-dom\";\nimport AddMembersModal from \"../AddMembersModal/AddMembersModal\";\nimport MessagesList from \"../MessagesList/MessagesList\";\nimport MessageInput from \"../../components/MessageInput/MessageInput\";\nimport { FileType } from \"rsuite/es/Uploader\";\nimport clsx from \"clsx\";\nimport { GET_USERS } from \"../../graphql/queries\";\nimport LeaveConfirmModal from \"../LeaveConfirmModal/LeaveConfirmModal\";\n\ninterface IProps {\n    activeChat: string | null;\n    activeChatType: string | null;\n    users: IUser[];\n    conversations: any[];\n    channels: any[];\n    client: any;\n    refetch: () => void;\n}\n\nconst ActiveChat: React.FC<IProps> = ({\n    activeChat,\n    users,\n    conversations,\n    activeChatType,\n    channels,\n    refetch,\n}) => {\n    const [showAddMembers, setShowAddMembers] = useState(false);\n    const [showLeaveConfirmModal, setShowLeaveConfirmModal] = useState(false);\n    const classes = useStyles();\n    const contentRef = useRef<HTMLDivElement>(null);\n    const activeUser = users.find((user) => user.id === activeChat);\n    const history = useHistory();\n    const activeConversation =\n        conversations.find(\n            (conversation: any) => conversation.id === activeChat\n        ) || channels.find((channel: any) => channel.id === activeChat);\n    const { loading, data, error } = useQuery<IMessageData, IMessageVars>(\n        getQueryByType(activeChatType).query,\n        {\n            variables: { id: activeChat },\n            skip: !activeChat,\n        }\n    );\n\n    const [sendMessageMutation] = useMutation(SEND_MESSAGE, {\n        update: function (cache, { data: { sendMessage } }) {\n            const query = cache.readQuery<any>({\n                query: getQueryByType(activeChatType).query,\n                variables: { id: activeChat },\n            });\n            cache.writeQuery({\n                query: getQueryByType(activeChatType).query,\n                variables: { id: activeChat },\n                data: { messages: query.messages.concat(sendMessage) },\n            });\n        },\n    });\n\n    const [leaveConversation] = useMutation(LEAVE_CONVERSATION, {\n        onCompleted() {\n            refetch();\n        },\n    });\n\n    const [toggleStar] = useMutation(TOGGLE_STAR, {\n        update: function (cache, { data: { toggleStar } }) {\n            const query = cache.readQuery<any>({\n                query: GET_USERS,\n            });\n            cache.writeQuery({\n                query: GET_USERS,\n                data: {\n                    conversations: query.conversations.map((c: any) => {\n                        return {\n                            ...c,\n                            starred:\n                                c.id === toggleStar.id\n                                    ? toggleStar.starred\n                                    : c.starred,\n                        };\n                    }),\n                    channels: query.channels.map((c: any) => {\n                        return {\n                            ...c,\n                            starred:\n                                c.id === toggleStar.id\n                                    ? toggleStar.starred\n                                    : c.starred,\n                        };\n                    }),\n                },\n            });\n        },\n    });\n\n    const scrollToBottom = useCallback(() => {\n        if (contentRef.current) {\n            contentRef.current.scrollTo(0, contentRef.current.scrollHeight);\n        }\n    }, []);\n\n    const toggleAddMembersModal = useCallback(() => {\n        setShowAddMembers(!showAddMembers);\n    }, [setShowAddMembers, showAddMembers]);\n\n    const handleSubmit = useCallback(\n        async (message: string | null, image: File | null) => {\n            console.log(image);\n            if (activeChatType === \"user\") {\n                await sendMessageMutation({\n                    variables: {\n                        data: {\n                            content: message,\n                            type: \"Private\",\n                            targetId: activeChat,\n                        },\n                        image,\n                    },\n                });\n            }\n            if (activeChatType === \"conversation\") {\n                await sendMessageMutation({\n                    variables: {\n                        data: {\n                            content: message,\n                            type: \"Conversation\",\n                            targetId: activeChat,\n                        },\n                        image,\n                    },\n                });\n            }\n        },\n        [sendMessageMutation, activeChat, activeChatType]\n    );\n\n    const handleLeaveClose = useCallback(() => {\n        setShowLeaveConfirmModal(false);\n    }, [setShowLeaveConfirmModal]);\n\n    const handleLeaveClick = useCallback(() => {\n        setShowLeaveConfirmModal(true);\n    }, [setShowLeaveConfirmModal]);\n\n    const handleLeaveConversation = useCallback(async () => {\n        history.push(\"/\");\n        await leaveConversation({ variables: { id: activeConversation.id } });\n    }, [history, activeConversation, leaveConversation]);\n\n    const handleLeaveConfirm = useCallback(async () => {\n        setShowLeaveConfirmModal(false);\n        await handleLeaveConversation();\n    }, [handleLeaveConversation, setShowLeaveConfirmModal]);\n\n    const renderLeaveButton = useCallback(() => {\n        if (activeChatType === \"conversation\" && activeConversation) {\n            return <Button onClick={handleLeaveClick}>Leave</Button>;\n        }\n    }, [\n        handleLeaveConversation,\n        activeConversation,\n        activeChatType,\n        handleLeaveClick,\n    ]);\n\n    const renderAddMembers = useCallback(() => {\n        if (activeChatType === \"conversation\" && activeConversation) {\n            return <Button onClick={toggleAddMembersModal}>Add members</Button>;\n        }\n    }, [toggleAddMembersModal, activeConversation, activeChatType]);\n\n    const renderName = useCallback(() => {\n        if (activeChatType === \"user\") {\n            return activeUser ? `${activeUser.displayName}` : \"None selected\";\n        }\n        if (activeChatType === \"conversation\") {\n            if (activeConversation?.name) {\n                return \"#\" + activeConversation?.name;\n            }\n            return activeConversation\n                ? `${constructGroupName(activeConversation.members)}`\n                : \"None selected\";\n        }\n        return \"None selected\";\n    }, [activeChatType, activeUser, activeConversation]);\n\n    const handleStarClick = useCallback(async () => {\n        await toggleStar({ variables: { id: activeConversation.id } });\n    }, [toggleStar, activeConversation]);\n\n    const renderStar = useCallback(() => {\n        if (activeChatType === \"conversation\" && activeConversation) {\n            return (\n                <Icon\n                    icon={activeConversation.starred ? \"star\" : \"star-o\"}\n                    onClick={handleStarClick}\n                    style={{ marginLeft: 10 }}\n                    className={clsx({\n                        [classes.pointer]: true,\n                        [classes.yellow]: activeConversation.starred,\n                    })}\n                />\n            );\n        }\n    }, [handleStarClick, classes, activeChatType, activeConversation]);\n\n    useEffect(() => {\n        scrollToBottom();\n    }, [scrollToBottom]);\n\n    if (loading) {\n        return <Loader vertical center content=\"Loading...\" />;\n    }\n    if (error && activeChat) {\n        return <div>Something went wrong...</div>;\n    }\n\n    return (\n        <Container className={classes.container}>\n            <Header className={classes.header}>\n                <h5>\n                    {renderName()} {renderLeaveButton()} {renderAddMembers()}\n                    {renderStar()}\n                </h5>\n            </Header>\n            <div className={classes.content} ref={contentRef}>\n                {data && data.messages && (\n                    <MessagesList\n                        users={users}\n                        conversations={conversations}\n                        channels={channels}\n                        messages={data.messages}\n                        isThread={false}\n                    />\n                )}\n            </div>\n            <Footer className={classes.footer}>\n                <MessageInput\n                    users={users}\n                    conversations={conversations}\n                    channels={channels}\n                    handleSubmit={handleSubmit}\n                />\n            </Footer>\n            <AddMembersModal\n                id={activeConversation?.id}\n                open={showAddMembers}\n                handleClose={toggleAddMembersModal}\n                refetch={refetch}\n                users={users}\n            />\n            <LeaveConfirmModal\n                open={showLeaveConfirmModal}\n                handleConfirm={handleLeaveConfirm}\n                handleClose={handleLeaveClose}\n            />\n        </Container>\n    );\n};\n\nexport default React.memo(ActiveChat);\n","import { gql } from \"@apollo/client\";\n\nexport const MESSAGES_SUBSCRIPTION = gql`\n    subscription subscribe {\n        subscribe {\n            event\n            payload {\n                chatId\n                message {\n                    id\n                    sender {\n                        id\n                        email\n                        displayName\n                        phoneNumber\n                        description\n                        imageUrl\n                    }\n                    content\n                    createdAt\n                    updatedAt\n                    replyCount\n                    imageUrl\n                    type\n                }\n            }\n        }\n    }\n`;\n","import { createUseStyles } from \"react-jss\";\nimport { ColorEnum } from \"../../types/enums/ColorEnum\";\n\nexport const useStyles = createUseStyles({\n    container: {\n        background: ColorEnum.LightGrey,\n        height: \"100%\",\n        borderLeft: 1,\n        borderLeftStyle: \"solid\",\n        borderColor: ColorEnum.LighterGrey,\n        WebkitTransition: \"width .5s ease-in-out\",\n        MozTransition: \"width .5s ease-in-out\",\n        OTransition: \"width .5s ease-in-out\",\n        transition: \"width .5s ease-in-out\",\n        overflow: \"hidden\",\n    },\n    open: {\n        width: 400,\n    },\n    closed: {\n        width: 0,\n    },\n    header: {\n        height: 60,\n        padding: \"20px 20px 15px\",\n        display: \"flex\",\n        justifyContent: \"space-between\",\n        alignItems: \"center\",\n        borderBottom: 1,\n        borderBottomStyle: \"solid\",\n        borderBottomColor: ColorEnum.LighterGrey,\n        background: ColorEnum.White,\n    },\n    footer: {\n        padding: 10,\n        border: 0,\n        alignItems: \"center\",\n    },\n});\n","import { gql } from \"@apollo/client\";\n\nexport const SEND_REPLY = gql`\n    mutation sendMessage($data: ReplyInput!, $image: Upload) {\n        sendReply(data: $data, image: $image) {\n            id\n            sender {\n                id\n                email\n                displayName\n                phoneNumber\n                description\n                imageUrl\n            }\n            content\n            createdAt\n            updatedAt\n            replyCount\n            imageUrl\n            type\n            pinned\n        }\n    }\n`;\n","import React, { useCallback, useContext } from \"react\";\nimport { useStyles } from \"./Sidebar.styles\";\nimport { Divider, Footer, Header, Icon, IconButton, Loader } from \"rsuite\";\nimport clsx from \"clsx\";\nimport Message from \"../../components/Message/Message\";\nimport { SidebarContext, SidebarUpdateContext } from \"../../contexts/Sidebar\";\nimport MessageInput from \"../../components/MessageInput/MessageInput\";\nimport { useMutation, useQuery } from \"@apollo/client\";\nimport { SEND_REPLY } from \"../../graphql/mutations/SEND_REPLY\";\nimport MessagesList from \"../MessagesList/MessagesList\";\nimport { GET_REPLIES } from \"../../graphql/queries/GET_REPLIES\";\nimport { IReplyData, IReplyVars } from \"../../types/interfaces/Reply\";\nimport { IUser } from \"../../types/interfaces\";\nimport { FileType } from \"rsuite/es/Uploader\";\n\ninterface IProps {\n    users: IUser[];\n    conversations: any[];\n    channels: any[];\n}\n\nconst Sidebar: React.FC<IProps> = ({ users, conversations, channels }) => {\n    const { isOpen, selectedThread } = useContext(SidebarContext);\n    const { close } = useContext(SidebarUpdateContext);\n    const classes = useStyles();\n    const { loading, data, error } = useQuery<IReplyData, IReplyVars>(\n        GET_REPLIES,\n        {\n            variables: { id: selectedThread?.id },\n            skip: !selectedThread,\n        }\n    );\n    const [sendReplyMutation] = useMutation(SEND_REPLY, {\n        update: function (cache, { data: { sendReply } }) {\n            const query = cache.readQuery<any>({\n                query: GET_REPLIES,\n                variables: { id: selectedThread?.id },\n            });\n            cache.writeQuery({\n                query: GET_REPLIES,\n                variables: { id: selectedThread?.id },\n                data: { messages: query.messages.concat(sendReply) },\n            });\n        },\n    });\n\n    const handleSubmit = useCallback(\n        async (message: string | null, image: File | null) => {\n            if (selectedThread) {\n                await sendReplyMutation({\n                    variables: {\n                        data: {\n                            content: message,\n                            parentId: selectedThread.id,\n                        },\n                        image,\n                    },\n                });\n            }\n        },\n        [sendReplyMutation, selectedThread]\n    );\n\n    if (loading) {\n        return <Loader vertical center content=\"Loading...\" />;\n    }\n    if (error && selectedThread) {\n        return <div>Something went wrong...</div>;\n    }\n\n    const stateClass = isOpen ? classes.open : classes.closed;\n    return (\n        <div className={clsx(classes.container, stateClass)}>\n            <Header className={classes.header}>\n                <h5>Thread</h5>\n                <IconButton onClick={close} icon={<Icon icon=\"close\" />} />\n            </Header>\n            {selectedThread && data && (\n                <div>\n                    <Message\n                        users={users}\n                        conversations={conversations}\n                        channels={channels}\n                        message={selectedThread}\n                        isThreadMessage={true}\n                    />\n                    <Divider />\n                    <MessagesList\n                        users={users}\n                        conversations={conversations}\n                        channels={channels}\n                        messages={data.messages}\n                        isThread={true}\n                    />\n                </div>\n            )}\n            <Footer className={classes.footer}>\n                <MessageInput\n                    users={users}\n                    conversations={conversations}\n                    channels={channels}\n                    handleSubmit={handleSubmit}\n                />\n            </Footer>\n        </div>\n    );\n};\n\nexport default React.memo(Sidebar);\n","import { createUseStyles } from \"react-jss\";\n\nexport const useStyles = createUseStyles({\n    container: {\n        height: \"100%\",\n    },\n});\n","import React, { useState, useEffect } from \"react\";\nimport { Container, Loader } from \"rsuite\";\nimport ChatList from \"../ChatList/ChatList\";\nimport ActiveChat from \"../ActiveChat/ActiveChat\";\nimport { GET_USERS } from \"../../graphql/queries\";\nimport {\n    useQuery,\n    ApolloConsumer,\n    useSubscription,\n    useApolloClient,\n} from \"@apollo/client\";\nimport { useRouteMatch } from \"react-router-dom\";\nimport { MESSAGES_SUBSCRIPTION } from \"../../graphql/subscriptions/MESSAGES_SUBSCRIPTION\";\nimport { readQuery } from \"../../utils/readQuery\";\nimport { getQueryByType } from \"../../utils/getQueryByType\";\nimport Sidebar from \"../Sidebar/Sidebar\";\nimport { useStyles } from \"./Main.styles\";\n\nconst Main = () => {\n    const [activeChat, setActiveChat] = useState(null);\n    const [activeChatType, setActiveChatType] = useState(null);\n    const { loading, data, error, refetch } = useQuery(GET_USERS);\n    const subscription = useSubscription(MESSAGES_SUBSCRIPTION);\n    const client = useApolloClient();\n    const match = useRouteMatch<any>();\n    const classes = useStyles();\n\n    useEffect(() => {\n        if (subscription.data?.subscribe) {\n            const { payload, event } = subscription.data?.subscribe;\n            if (payload.chatId && payload.message) {\n                const cache = readQuery(client, {\n                    query: getQueryByType(event).query,\n                    variables: {\n                        id: payload.chatId,\n                    },\n                });\n\n                if (cache?.messages) {\n                    client.writeQuery({\n                        query: getQueryByType(event).query,\n                        variables: {\n                            id: payload.chatId,\n                        },\n                        data: {\n                            messages: cache.messages.concat(payload.message),\n                        },\n                    });\n                }\n            }\n        }\n    }, [subscription.data, client, activeChatType]);\n\n    useEffect(() => {\n        setActiveChat(match.params.id);\n        setActiveChatType(match.params.type);\n    }, [match.params.id, match.params.type]);\n\n    if (loading) {\n        return <Loader vertical center content=\"Loading...\" />;\n    }\n\n    if (error) {\n        return (\n            <Container style={{ height: \"100%\" }}>\n                Something went wrong!\n            </Container>\n        );\n    }\n\n    return (\n        <ApolloConsumer>\n            {(client) => (\n                <Container className={classes.container}>\n                    <ChatList\n                        users={data.users}\n                        conversations={data.conversations}\n                        channels={data.channels}\n                        refetch={refetch}\n                    />\n                    <ActiveChat\n                        users={data.users}\n                        conversations={data.conversations}\n                        channels={data.channels}\n                        activeChat={activeChat}\n                        activeChatType={activeChatType}\n                        client={client}\n                        refetch={refetch}\n                    />\n                    <Sidebar\n                        users={data.users}\n                        conversations={data.conversations}\n                        channels={data.channels}\n                    />\n                </Container>\n            )}\n        </ApolloConsumer>\n    );\n};\n\nexport default Main;\n","import { ApolloClient } from \"@apollo/client\";\nimport { DataProxy } from \"@apollo/client/cache/core/types/DataProxy\";\n\nexport const readQuery = (\n    client: ApolloClient<object>,\n    options: DataProxy.Query<object>\n) => {\n    try {\n        return client.readQuery(options);\n    } catch {\n        return null;\n    }\n};\n","import React from \"react\";\nimport { BrowserRouter, Switch, Route } from \"react-router-dom\";\nimport Register from \"../containers/Register/Register\";\nimport Login from \"../containers/Login/Login\";\nimport { AuthenticatedRoute } from \"./AuthenticatedRoute\";\nimport Main from \"../containers/Main/Main\";\n\nexport const Routes = () => {\n    return (\n        <BrowserRouter basename=\"/stud-18\">\n            <Switch>\n                <Route path=\"/register\">\n                    <Register />\n                </Route>\n                <Route exact={true} path=\"/login\">\n                    <Login />\n                </Route>\n                <AuthenticatedRoute path=\"/:type?/:id?\">\n                    <Main />\n                </AuthenticatedRoute>\n            </Switch>\n        </BrowserRouter>\n    );\n};\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport {\n    ApolloClient,\n    HttpLink,\n    InMemoryCache,\n    ApolloProvider,\n    ApolloLink,\n    concat,\n    split,\n} from \"@apollo/client\";\nimport { getMainDefinition } from \"@apollo/client/utilities\";\nimport \"rsuite/lib/styles/themes/dark/index.less\";\nimport { Routes } from \"./routes\";\nimport { IUser } from \"./types/interfaces\";\nimport { WebSocketLink } from \"@apollo/link-ws\";\nimport \"./index.css\";\nimport \"rsuite/dist/styles/rsuite-default.css\";\nimport { subscriptionClient } from \"./utils/subscriptionClient\";\nimport { SidebarProvider } from \"./contexts/Sidebar\";\nimport { UserProvider } from \"./contexts/UserContext\";\nimport { createUploadLink } from \"apollo-upload-client\";\n\nconst wsLink = new WebSocketLink(subscriptionClient);\nconst uploadLink = createUploadLink({\n    uri: \"http://dc-itc.el.vgtu.lt:22080/stud-18-backend/graphql\",\n}) as any;\n\nconst splitLink = split(\n    ({ query }: any) => {\n        const definition = getMainDefinition(query);\n        return (\n            definition.kind === \"OperationDefinition\" &&\n            definition.operation === \"subscription\"\n        );\n    },\n    wsLink,\n    uploadLink\n);\n\nconst authMiddleware = new ApolloLink((operation, forward) => {\n    let user: string | IUser | null = localStorage.getItem(\"current-user\");\n    if (user) {\n        user = JSON.parse(user) as IUser;\n        operation.setContext({\n            headers: {\n                authorization: user.token,\n            },\n        });\n    }\n\n    return forward(operation);\n});\n\nconst client = new ApolloClient({\n    cache: new InMemoryCache(),\n    link: concat(authMiddleware, splitLink),\n});\n\nfunction App() {\n    return (\n        <ApolloProvider client={client}>\n            <UserProvider>\n                <SidebarProvider>\n                    <Routes />\n                </SidebarProvider>\n            </UserProvider>\n        </ApolloProvider>\n    );\n}\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}